version: "3.9"

### Networks
networks:
  default:
    driver: bridge
  t2_proxy:
    name: t2_proxy
    driver: bridge
    # ipam:
    #   config:
    #     - subnet: 192.168.86.0/24

### Secrets
# secrets:
#   htpasswd:
#     file: $DOCKERDIR/secrets/htpasswd
#   cf_email:
#     file: $DOCKERDIR/secrets/cf_email
#   cf_api_key:
#     file: $DOCKERDIR/secrets/cf_api_key
#   cf_token:
#     file: $DOCKERDIR/secrets/cf_token
#   postgres_wiki_db:
#     file: $DOCKERDIR/secrets/postgres_wiki_db
#   postgres_wiki_db_user:
#     file: $DOCKERDIR/secrets/postgres_wiki_db_user
#   postgres_wiki_db_password:
#     file: $DOCKERDIR/secrets/postgres_wiki_db_password
### Extension fields
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID
 
# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: always
 
# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
 
# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"


### Services
services:
  # Traefik 2 - Reverse Proxy
  traefik:
    <<: *common-keys-core
    container_name: traefik
    image: traefik:2.7
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --entryPoints.traefik.address=:8080
      - --api=true
      #- --api.insecure=true
      - --api.dashboard=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      # - --providers.docker.endpoint=tcp://socket-proxy:2375 # Use this instead of the previous line if you have socket proxy.
      - --providers.docker.exposedByDefault=false
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      # - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME_HOME_SERVER
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME_HOME_SERVER
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for second domain
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      - t2_proxy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 9333
        published: 2222
        protocol: tcp
        mode: host
      #- target: 8080 # insecure api wont work
      #  published: 8080
      #  protocol: tcp
      #  mode: host
    volumes:
      - $DOCKERDIR/appdata/traefik2/rules/homeserver:/rules
      - $DOCKERDIR/appdata/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/logs/homeserver/traefik:/logs
      - $DOCKERDIR/shared:/shared
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=$TZ
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CF_API_KEY
      #- HTPASSWD_FILE=/run/secrets/htpasswd
      - DOMAINNAME_HOME_SERVER
        #secrets:
        #  - cf_email
        #  - cf_api_key
      #- htpasswd
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME_HOME_SERVER`)"
      - "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME_HOME_SERVER"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME_HOME_SERVER"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAINNAME2" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAINNAME2" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-oauth@file"

  transmission:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    ports:
      - "9091:9091"
      - "51413:51413"
      - "51413:51413/udp"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/transmission:/config
      - $STORAGEDIR/data/torrents:/data/torrents
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.transmission-rtr.entrypoints=https"
      - "traefik.http.routers.transmission-rtr.rule=Host(`transmission.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.transmission-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.transmission-rtr.service=transmission-svc"
      - "traefik.http.services.transmission-svc.loadbalancer.server.port=9091"
  # nzbget - Binary newsgrabber (NZB downloader)
  nzbget:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/nzbget
    container_name: nzbget
    ports:
      - "$NZBGET_PORT:6789"
    volumes:
      - $DOCKERDIR/appdata/nzbget:/config
      - $STORAGEDIR/data/usenet:/data/usenet
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.nzbget-rtr-bypass.entrypoints=https"
      # BYPASS IS NOT WORKING YET. NEED TO FIGURE THIS OUT.
      - "traefik.http.routers.nzbget-rtr-bypass.rule=Host(`nzbget.$DOMAINNAME_HOME_SERVER`)"
      #- "traefik.http.routers.nzbget-rtr-bypass.rule=Host(`nzbget.$DOMAINNAME_HOME_SERVER`) && Query(`apikey`, `$NZBGET_API_KEY`)"
      - "traefik.http.routers.nzbget-rtr-bypass.priority=50"
      ## HTTP Routers Auth
      - "traefik.http.routers.nzbget-rtr.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.$DOMAINNAME_HOME_SERVER`)"
      - "traefik.http.routers.nzbget-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.nzbget-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.nzbget-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.nzbget-rtr.service=nzbget-svc"
      - "traefik.http.routers.nzbget-rtr-bypass.service=nzbget-svc"
      - "traefik.http.services.nzbget-svc.loadbalancer.server.port=6789"

        # transmission-openvpn:
        #   <<: *common-keys-apps
        #   image: haugene/transmission-openvpn:latest
        #   container_name: transmission-openvpn
        #   ports:
        #     - "9092:9091"
        #     - "51413:51413"
        #     - "51413:51413/udp"
        #   volumes:
        #     - /etc/localtime:/etc/localtime:ro
        #     - $DOCKERDIR/appdata/transmission-openvpn:/config
        #     - $STORAGEDIR/data/torrents:/data/torrents
        #   environment:
        #     <<: *default-tz-puid-pgid
        #     OPENVPN_PROVIDER: PROTONVPN
        #     OPENVPN_CONFIG: $OPENVPN_CONFIG
        #     OPENVPN_USERNAME: $OPENVPN_USERNAME
        #     OPENVPN_PASSWORD: $OPENVPN_PASSWORD
        #   labels:
        #     - "traefik.enable=true"
        #     ## HTTP Routers
        #     - "traefik.http.routers.transmission-openvpn-rtr.entrypoints=https"
        #     - "traefik.http.routers.transmission-openvpn-rtr.rule=Host(`transmission-openvpn.$DOMAINNAME_HOME_SERVER`)"
        #     ## Middlewares
        #     - "traefik.http.routers.transmission-openvpn-rtr.middlewares=chain-oauth@file"
        #     ## HTTP Services
        #     - "traefik.http.routers.transmission-openvpn-rtr.service=transmission-openvpn-svc"
        #     - "traefik.http.services.transmission-openvpn-svc.loadbalancer.server.port=9091"

  oauth:
    <<: *common-keys-apps
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=$OAUTH_CLIENT_ID
      - PROVIDERS_GOOGLE_CLIENT_SECRET=$OAUTH_CLIENT_SECRET
      - SECRET=$OAUTH_RANDOM
      - COOKIE_DOMAIN=$DOMAINNAME_HOME_SERVER
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME_HOME_SERVER
      - URL_PATH=/_oauth
      - LOG_LEVEL=warn # set to trace while testing bypass rules
      - LOG_FORMAT=text
      - LIFETIME=86400
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/oauth:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  oauth-ext:
    <<: *common-keys-apps
    container_name: oauth-ext
    image: thomseddon/traefik-forward-auth:latest
    ports:
      - "4182:4181"
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=$OAUTH_EXT_CLIENT_ID
      - PROVIDERS_GOOGLE_CLIENT_SECRET=$OAUTH_EXT_CLIENT_SECRET
      - SECRET=$OAUTH_EXT_RANDOM
      - COOKIE_DOMAIN=$DOMAINNAME_HOME_SERVER
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth-ext.$DOMAINNAME_HOME_SERVER
      - URL_PATH=/_oauth
      - LOG_LEVEL=warn # set to trace while testing bypass rules
      - LOG_FORMAT=text
      - LIFETIME=86400
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/oauth-ext:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-ext-rtr.tls=true"
      - "traefik.http.routers.oauth-ext-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-ext-rtr.rule=Host(`oauth.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.oauth-ext-rtr.middlewares=chain-oauth-ext@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-ext-rtr.service=oauth-ext-svc"
      - "traefik.http.services.oauth-ext-svc.loadbalancer.server.port=4181"

  heimdall:
    <<: *common-keys-core
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    volumes:
      - $DOCKERDIR/appdata/heimdall:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`$DOMAINNAME_HOME_SERVER`,`www.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

  mealie:
    <<: *common-keys-core
    container_name: mealie
    image: hkotel/mealie:latest
    ports:
      - 9000:80
    environment:
      <<: *default-tz-puid-pgid
      #db_username: $MEALIE_DB_USER
      #db_password: $MEALIE_DB_PASSWORD
      #db_host: mongo
      #db_port: $MONGODB_PORT
      #DB_ENGINE: mongodb
    volumes:
      - $DOCKERDIR/appdata/mealie:/app/data/
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.mealie-rtr.entrypoints=https"
      - "traefik.http.routers.mealie-rtr.rule=Host(`mealie.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.mealie-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.mealie-rtr.service=mealie-svc"
      - "traefik.http.services.mealie-svc.loadbalancer.server.port=9000"

        #mongo:
        #  <<: *common-keys-core
        #  image: mongo
        #  container_name: mealie-mongo
        #  volumes:
        #    - $DOCKERDIR/appdata/mongo:/data/db
        #  environment:
        #    MONGO_INITDB_ROOT_USERNAME: $MEALIE_DB_USER
        #    MONGO_INITDB_ROOT_PASSWORD: $MEALIE_DB_PASSWORD

  plex:
    <<: *common-keys-media
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    ports:
      - "32400:32400"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/plex:/config
      - $STORAGEDIR/data/media:/data/media
      - $STORAGEDIR/transcode:/transcode
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.plex-rtr.entrypoints=https"
      - "traefik.http.routers.plex-rtr.rule=Host(`plex.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.plex-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.plex-rtr.service=plex-svc"
      - "traefik.http.services.plex-svc.loadbalancer.server.port=32400"

  radarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/radarr:nightly
    container_name: radarr
    ports:
      - "$RADARR_PORT:7878"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/radarr:/config
      - $STORAGEDIR/data:/data
      - /mnt/ssd/temp1tb:/imports
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME_HOME_SERVER`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME_HOME_SERVER`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  sonarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    ports:
      - "$SONARR_PORT:8989"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/sonarr:/config
      - $STORAGEDIR/data:/data
      - /mnt/ssd/temp1tb:/imports
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME_HOME_SERVER`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME_HOME_SERVER`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  jackett:
    <<: *common-keys-media
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    ports:
      - "9117:9117"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/jackett:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"

  ombi:
    <<: *common-keys-media
    image: lscr.io/linuxserver/ombi:latest
    container_name: ombi
    ports:
      - "3579:3579"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/ombi:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.ombi-rtr.entrypoints=https"
      - "traefik.http.routers.ombi-rtr.rule=Host(`ombi.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.ombi-rtr.middlewares=chain-basic-auth@file"
      - "traefik.http.routers.ombi-rtr.middlewares=chain-oauth-ext@file"
      ## HTTP Services
      - "traefik.http.routers.ombi-rtr.service=ombi-svc"
      - "traefik.http.services.ombi-svc.loadbalancer.server.port=3579"

  # Glances - System Information
  glances:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: nicolargo/glances:latest
    container_name: glances
    # privileged: true # Only for VM
    # network_mode: host
    ports:
      - "$GLANCES_PORT:61208"
    pid: host
    volumes:
      - $DOCKERDIR/appdata/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
      - $STORAGEDIR/data/media:/data/media:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
    environment:
      # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      # GLANCES_OPT: "--export influxdb"
      GLANCES_OPT: "-w"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.glances-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  # Uptime Kuma - Status Page & Monitoring Server
  uptime-kuma:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: louislam/uptime-kuma
    container_name: uptime-kuma
    ports:
      - "$KUMA_PORT:3001"
    volumes:
      - $DOCKERDIR/appdata/uptime-kuma:/app/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.uptime-kuma-rtr.entrypoints=https"
      - "traefik.http.routers.uptime-kuma-rtr.rule=Host(`kuma.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.uptime-kuma-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.uptime-kuma-rtr.service=uptime-kuma-svc"
      - "traefik.http.services.uptime-kuma-svc.loadbalancer.server.port=3001"

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: amir20/dozzle:latest
    container_name: dozzle
    networks:
      - t2_proxy
    ports:
      - "8080:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock 
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME_HOME_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"
        
  cf-companion:
    <<: *common-keys-core
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      - CF_TOKEN=$CF_TOKEN
      - TARGET_DOMAIN=van-gogh.$DOMAINNAME_HOME_SERVER
      - DOMAIN1=$DOMAINNAME_HOME_SERVER
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
      - DOMAIN1_PROXIED=TRUE
        #secrets:
        #  - cf_token
    # labels:
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      # - "traefik.http.routers.cf-companion-rtr.rule=HostHeader(`pihole.$DOMAINNAME_HOME_SERVER`) || HostHeader(`hassio.$DOMAINNAME_HOME_SERVER`)"

